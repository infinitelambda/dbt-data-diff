macros:
  - name: data_diff__run
    description: |
      Execute (or Produce the script of) the Data Diff's stored procedures.
    arguments:
      - name: in_hook
        type: boolean [default=false]
        description: True to generate SQL script only, False to exclude SQL right after the generation
      - name: is_cleanup
        type: boolean [default=false]
        description: True to perform additional SQL script for cleaning up (log only) by calling `data_diff__cleanup`

  - name: data_diff__run_async
    description: |
      Execute (or Produce the script of) the Data Diff's stored procedures, wrapped into a DAG of Tasks.
    arguments:
      - name: is_polling_status [default=false]
        type: boolean
        description: True to keep polling task status until it's finished or timout. Note, it doesn't support to run in hook
      - name: in_hook [default=false]
        type: boolean
        description: True to generate SQL script only, False to exclude SQL right after the generation
      - name: is_cleanup
        type: boolean [default=false]
        description: True to perform additional SQL script for cleaning up (log & task dag) by calling `data_diff__cleanup`

  - name: data_diff__poll_status_async
    description: |
      Execute the status polling of the executed DAG of Tasks based on the coresponding dbt invocation id

      Uasge:
      ```bash
      dbt run-operation \
        data_diff__poll_status_async \
        --args '{p_invocation_id:"9642e2dd-9c10-4a10-a979-7d169b5d3731", poll_times:10, poll_wait_in_s:60}
      ```
    arguments:
      - name: p_invocation_id
        type: string
        description: The coresponding dbt invocation_id
      - name: poll_times [default=100]
        type: integer
        description: Number of times it tries to execute the polling script
      - name: poll_wait_in_s [default=60]
        type: integer
        description: Number of seconds need to wait in each polling

  - name: data_diff__cleanup
    description: TODO clean up diff tables
